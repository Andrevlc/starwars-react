{"ast":null,"code":"var _jsxFileName = \"/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlanets } from '../actions';\nimport TableHeaders from './tableheaders';\nimport TableValues from './tableValues';\nimport swPlanetss from '../reducers/swPlanets';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      renderP: []\n    };\n  }\n\n  componentDidMount() {\n    const getCurrentPlanets = this.props.getCurrentPlanets; // console.log('antes de chamar')\n\n    getCurrentPlanets();\n  }\n\n  filterTest() {\n    const _this$props = this.props,\n          swPlanetss = _this$props.swPlanetss,\n          cColumn = _this$props.cColumn,\n          cOperation = _this$props.cOperation,\n          cNumber = _this$props.cNumber;\n    let data = swPlanetss;\n\n    if (cColumn !== undefined) {\n      let tempC = cColumn;\n\n      if (cOperation === 'maior que') {\n        console.log('oi');\n        data = data.filter(plani => plani[tempC] > cNumber);\n      } else if (cOperation === 'menor que') {\n        data.filter(plani => plani[cColumn] < cNumber);\n      } else if (cOperation === 'igual a') {\n        data.filter(plani => plani[cColumn] === cNumber);\n      }\n    }\n\n    console.log(data);\n    console.log(cColumn);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          swPlanetss = _this$props2.swPlanetss,\n          isFetching = _this$props2.isFetching,\n          textFilter = _this$props2.textFilter;\n    const renderP = this.state.renderP;\n\n    if (isFetching) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Carregando...\");\n    }\n\n    let planet = sw;\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      value: \"submit\",\n      \"data-testid\": \"button-filter\",\n      onClick: () => this.filterTest(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Filtrar\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(TableHeaders, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, renderP.filter(planet => planet.name.toLowerCase().includes(textFilter.toLowerCase())).map(elements => React.createElement(TableValues, {\n      key: elements.diameter,\n      elements: elements,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  swPlanetss: state.swPlanetss.data,\n  isFetching: state.swPlanetss.isFetching,\n  textFilter: state.filters.filterByName.name,\n  cColumn: state.filters.filterByNumber.column,\n  cOperation: state.filters.filterByNumber.operation,\n  cNumber: state.filters.filterByNumber.number\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCurrentPlanets: () => dispatch(fetchPlanets())\n}); // DÃºvida solucionada no site\n// https://stackoverflow.com/questions/38684925/react-eslint-error-missing-in-props-validation\n\n\nTable.propTypes = {\n  getCurrentPlanets: PropTypes.func.isRequired,\n  swPlanetss: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  textFilter: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","PropTypes","connect","fetchPlanets","TableHeaders","TableValues","swPlanetss","Table","Component","constructor","props","state","renderP","componentDidMount","getCurrentPlanets","filterTest","cColumn","cOperation","cNumber","data","undefined","tempC","console","log","filter","plani","render","isFetching","textFilter","planet","sw","name","toLowerCase","includes","map","elements","diameter","mapStateToProps","filters","filterByName","filterByNumber","column","operation","number","mapDispatchToProps","dispatch","propTypes","func","isRequired","array","bool","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlanets } from '../actions';\nimport TableHeaders from './tableheaders';\nimport TableValues from './tableValues'\nimport swPlanetss from '../reducers/swPlanets';\n\nclass Table extends React.Component {\n  constructor (props){\n    super(props);\n    this.state = {\n      renderP: [],\n    }\n  }\n  componentDidMount() {\n    const { getCurrentPlanets } = this.props;\n    // console.log('antes de chamar')\n    getCurrentPlanets();\n  }\n  filterTest() {\n    const { swPlanetss, cColumn, cOperation, cNumber } = this.props;\n    let data = swPlanetss;\n    if(cColumn !== undefined){\n      let tempC = cColumn;\n      if(cOperation === 'maior que'){\n        console.log('oi')\n        data = data.filter((plani) => (plani[tempC]> cNumber))\n      }\n      else if (cOperation === 'menor que'){\n          data.filter ((plani) => (\n            plani[cColumn] < cNumber\n          ))}\n      else if (cOperation === 'igual a'){\n            data.filter ((plani) => (\n              plani[cColumn] === cNumber\n            ))}\n    }\n    console.log(data)\n    console.log (cColumn)\n  }\n\n  render() {\n    const { swPlanetss, isFetching, textFilter } = this.props;\n    const { renderP } = this.state;\n    if (isFetching) { return <p>Carregando...</p>; }\n    let planet = sw\n    return (\n      <section>\n        <button  \n        value='submit' \n        data-testid='button-filter'\n        onClick={() => this.filterTest()}\n        >Filtrar</button>\n        <table>\n          <TableHeaders />\n          <tbody>\n          {renderP\n          .filter((planet) => (planet.name.toLowerCase().includes(textFilter.toLowerCase())))\n          .map((elements) => (\n            <TableValues key={elements.diameter} elements={ elements } />\n          ))}\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  swPlanetss: state.swPlanetss.data,\n  isFetching: state.swPlanetss.isFetching,\n  textFilter: state.filters.filterByName.name,\n  cColumn: state.filters.filterByNumber.column,\n  cOperation: state.filters.filterByNumber.operation,\n  cNumber: state.filters.filterByNumber.number,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrentPlanets: () => dispatch(fetchPlanets()) });\n// DÃºvida solucionada no site\n// https://stackoverflow.com/questions/38684925/react-eslint-error-missing-in-props-validation\nTable.propTypes = {\n  getCurrentPlanets: PropTypes.func.isRequired,\n  swPlanetss: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  textFilter: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n"]},"metadata":{},"sourceType":"module"}