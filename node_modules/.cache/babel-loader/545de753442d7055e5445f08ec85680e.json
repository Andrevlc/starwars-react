{"ast":null,"code":"// export const SW_PLANETS = 'SW_PLANETS';\n// export const startingPlanets = () =>(\n//   {\n//     type: SW_PLANETS,\n//     name: 'Teste',\n//     rotationP: 0,\n//     diameter:0,\n//     climate: 'cold',\n//     gravite: 0,\n//     surfaceWater: 0,\n//     population: 30,\n//   }\n// )\nimport getPlanets from '../services/data';\nimport { number } from 'prop-types';\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\nexport const SEARCH_FILTER = 'SEARCH_FILTER';\nexport const NUMBER_FILTER = 'NUMBER_FILTER';\nexport const COLUMN_FILTER = 'COLUMN_FILTER';\nexport const OPERATION_FILTER = 'OPERATION_FILTER';\nexport const TOTAL_FILTER = 'TOTAL_FILTER';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS\n});\n\nconst requestPlanetsSuccess = results => ({\n  type: REQUEST_PLANETS_SUCCESS,\n  data: results\n});\n\nconst requestPlanetsFailure = error => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error\n});\n\nexport function searchFilter(string) {\n  return {\n    type: SEARCH_FILTER,\n    payload: string\n  };\n} // export function nFilter(number){\n//   return (\n//     {\n//       type: NUMBER_FILTER,\n//       payload:number,\n//     }\n//   )\n// }\n// export function oFilter(operation){\n//   return (\n//     {\n//       type: OPERATION_FILTER,\n//       payload:operation,\n//     }\n//   )\n// }\n// export function cFilter(column){\n//   return (\n//     {\n//       type: COLUMN_FILTER,\n//       payload:column,\n//     }\n//   )\n// }\n\nexport function totalFilter(column, comparison, value) {\n  return {\n    type: TOTAL_FILTER,\n    payload: {\n      value,\n      comparison,\n      column\n    }\n  };\n}\nexport function fetchPlanets() {\n  return dispatch => {\n    dispatch(requestPlanets());\n    return getPlanets().then(results => dispatch(requestPlanetsSuccess(results)), error => dispatch(requestPlanetsFailure(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/actions/index.js"],"names":["getPlanets","number","REQUEST_PLANETS","REQUEST_PLANETS_SUCCESS","REQUEST_PLANETS_FAILURE","SEARCH_FILTER","NUMBER_FILTER","COLUMN_FILTER","OPERATION_FILTER","TOTAL_FILTER","requestPlanets","type","requestPlanetsSuccess","results","data","requestPlanetsFailure","error","searchFilter","string","payload","totalFilter","column","comparison","value","fetchPlanets","dispatch","then","message"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,uBAAuB,GAAG,wBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;;AAEP,MAAMC,cAAc,GAAG,OAAO;AAC5BC,EAAAA,IAAI,EAAET;AADsB,CAAP,CAAvB;;AAIA,MAAMU,qBAAqB,GAAIC,OAAD,KAAc;AAC1CF,EAAAA,IAAI,EAAER,uBADoC;AAE1CW,EAAAA,IAAI,EAAED;AAFoC,CAAd,CAA9B;;AAKA,MAAME,qBAAqB,GAAIC,KAAD,KAAY;AACxCL,EAAAA,IAAI,EAAEP,uBADkC;AAExCY,EAAAA;AAFwC,CAAZ,CAA9B;;AAKA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AACnC,SACA;AACEP,IAAAA,IAAI,EAAEN,aADR;AAEEc,IAAAA,OAAO,EAAED;AAFX,GADA;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAO,SAASE,WAAT,CAAsBC,MAAtB,EAA6BC,UAA7B,EAAwCC,KAAxC,EAA+C;AACpD,SACE;AACEZ,IAAAA,IAAI,EAACF,YADP;AAEEU,IAAAA,OAAO,EAAC;AACNI,MAAAA,KADM;AAEND,MAAAA,UAFM;AAGND,MAAAA;AAHM;AAFV,GADF;AAUD;AACH,OAAO,SAASG,YAAT,GAAwB;AAC7B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACf,cAAc,EAAf,CAAR;AAEA,WAAOV,UAAU,GACd0B,IADI,CAEFb,OAAD,IAAaY,QAAQ,CAACb,qBAAqB,CAACC,OAAD,CAAtB,CAFlB,EAGFG,KAAD,IAAWS,QAAQ,CAACV,qBAAqB,CAACC,KAAK,CAACW,OAAP,CAAtB,CAHhB,CAAP;AAKD,GARD;AASD","sourcesContent":["// export const SW_PLANETS = 'SW_PLANETS';\n\n// export const startingPlanets = () =>(\n//   {\n//     type: SW_PLANETS,\n//     name: 'Teste',\n//     rotationP: 0,\n//     diameter:0,\n//     climate: 'cold',\n//     gravite: 0,\n//     surfaceWater: 0,\n//     population: 30,\n//   }\n// )\nimport getPlanets from '../services/data';\nimport { number } from 'prop-types';\n\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\nexport const SEARCH_FILTER = 'SEARCH_FILTER';\nexport const NUMBER_FILTER = 'NUMBER_FILTER';\nexport const COLUMN_FILTER = 'COLUMN_FILTER';\nexport const OPERATION_FILTER = 'OPERATION_FILTER';\nexport const TOTAL_FILTER = 'TOTAL_FILTER';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS,\n});\n\nconst requestPlanetsSuccess = (results) => ({\n  type: REQUEST_PLANETS_SUCCESS,\n  data: results,\n});\n\nconst requestPlanetsFailure = (error) => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error,\n});\n\nexport function searchFilter(string) {\n  return (\n  {\n    type: SEARCH_FILTER,\n    payload: string,\n  });\n}\n\n// export function nFilter(number){\n//   return (\n//     {\n//       type: NUMBER_FILTER,\n//       payload:number,\n//     }\n//   )\n// }\n// export function oFilter(operation){\n//   return (\n//     {\n//       type: OPERATION_FILTER,\n//       payload:operation,\n//     }\n//   )\n// }\n// export function cFilter(column){\n//   return (\n//     {\n//       type: COLUMN_FILTER,\n//       payload:column,\n//     }\n//   )\n// }\n  export function totalFilter (column,comparison,value) {\n    return (\n      {\n        type:TOTAL_FILTER,\n        payload:{\n          value,\n          comparison,\n          column,\n        }\n      }\n    )\n  }\nexport function fetchPlanets() {\n  return (dispatch) => {\n    dispatch(requestPlanets());\n\n    return getPlanets()\n      .then(\n        (results) => dispatch(requestPlanetsSuccess(results)),\n        (error) => dispatch(requestPlanetsFailure(error.message)),\n      );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}