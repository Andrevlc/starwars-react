{"ast":null,"code":"import getPlanets from '../services/data';\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\nexport const SEARCH_FILTER = 'SEARCH_FILTER';\nexport const NUMBER_FILTER = 'NUMBER_FILTER';\nexport const COLUMN_FILTER = 'COLUMN_FILTER';\nexport const OPERATION_FILTER = 'OPERATION_FILTER';\nexport const TOTAL_FILTER = 'TOTAL_FILTER';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS\n});\n\nconst requestPlanetsSuccess = results => ({\n  type: REQUEST_PLANETS_SUCCESS,\n  data: results\n});\n\nconst requestPlanetsFailure = error => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error\n});\n\nexport function searchFilter(string) {\n  return {\n    type: SEARCH_FILTER,\n    payload: string\n  };\n}\nexport function totalFilter(column, comparison, value) {\n  return {\n    type: TOTAL_FILTER,\n    payload: {\n      value,\n      comparison,\n      column\n    }\n  };\n}\nexport function fetchPlanets() {\n  return dispatch => {\n    dispatch(requestPlanets());\n    return getPlanets().then(results => dispatch(requestPlanetsSuccess(results)), error => dispatch(requestPlanetsFailure(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/actions/index.js"],"names":["getPlanets","REQUEST_PLANETS","REQUEST_PLANETS_SUCCESS","REQUEST_PLANETS_FAILURE","SEARCH_FILTER","NUMBER_FILTER","COLUMN_FILTER","OPERATION_FILTER","TOTAL_FILTER","requestPlanets","type","requestPlanetsSuccess","results","data","requestPlanetsFailure","error","searchFilter","string","payload","totalFilter","column","comparison","value","fetchPlanets","dispatch","then","message"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,uBAAuB,GAAG,wBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;;AAEP,MAAMC,cAAc,GAAG,OAAO;AAC5BC,EAAAA,IAAI,EAAET;AADsB,CAAP,CAAvB;;AAIA,MAAMU,qBAAqB,GAAIC,OAAD,KAAc;AAC1CF,EAAAA,IAAI,EAAER,uBADoC;AAE1CW,EAAAA,IAAI,EAAED;AAFoC,CAAd,CAA9B;;AAKA,MAAME,qBAAqB,GAAIC,KAAD,KAAY;AACxCL,EAAAA,IAAI,EAAEP,uBADkC;AAExCY,EAAAA;AAFwC,CAAZ,CAA9B;;AAKA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AACnC,SAAO;AACLP,IAAAA,IAAI,EAAEN,aADD;AAELc,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID;AACD,OAAO,SAASE,WAAT,CAAqBC,MAArB,EAA6BC,UAA7B,EAAyCC,KAAzC,EAAgD;AACrD,SAAO;AACLZ,IAAAA,IAAI,EAAEF,YADD;AAELU,IAAAA,OAAO,EAAE;AACPI,MAAAA,KADO;AAEPD,MAAAA,UAFO;AAGPD,MAAAA;AAHO;AAFJ,GAAP;AAQD;AACD,OAAO,SAASG,YAAT,GAAwB;AAC7B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACf,cAAc,EAAf,CAAR;AAEA,WAAOT,UAAU,GAAGyB,IAAb,CACJb,OAAD,IAAaY,QAAQ,CAACb,qBAAqB,CAACC,OAAD,CAAtB,CADhB,EAEJG,KAAD,IAAWS,QAAQ,CAACV,qBAAqB,CAACC,KAAK,CAACW,OAAP,CAAtB,CAFd,CAAP;AAID,GAPD;AAQD","sourcesContent":["import getPlanets from '../services/data';\n\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\nexport const SEARCH_FILTER = 'SEARCH_FILTER';\nexport const NUMBER_FILTER = 'NUMBER_FILTER';\nexport const COLUMN_FILTER = 'COLUMN_FILTER';\nexport const OPERATION_FILTER = 'OPERATION_FILTER';\nexport const TOTAL_FILTER = 'TOTAL_FILTER';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS,\n});\n\nconst requestPlanetsSuccess = (results) => ({\n  type: REQUEST_PLANETS_SUCCESS,\n  data: results,\n});\n\nconst requestPlanetsFailure = (error) => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error,\n});\n\nexport function searchFilter(string) {\n  return {\n    type: SEARCH_FILTER,\n    payload: string,\n  };\n}\nexport function totalFilter(column, comparison, value) {\n  return {\n    type: TOTAL_FILTER,\n    payload: {\n      value,\n      comparison,\n      column,\n    },\n  };\n}\nexport function fetchPlanets() {\n  return (dispatch) => {\n    dispatch(requestPlanets());\n\n    return getPlanets().then(\n      (results) => dispatch(requestPlanetsSuccess(results)),\n      (error) => dispatch(requestPlanetsFailure(error.message)),\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}