{"ast":null,"code":"var _jsxFileName = \"/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPlanets } from '../actions';\nimport TableHeaders from './tableheaders'; // import PropTypes from 'prop-types';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const getCurrentPlanets = this.props.getCurrentPlanets; // console.log('antes de chamar')\n\n    getCurrentPlanets();\n  }\n\n  render() {\n    const _this$props = this.props,\n          swPlanetss = _this$props.swPlanetss,\n          isFetching = _this$props.isFetching; // console.log(swPlanetss);\n    // console.log(typeof(swPlanetss))\n\n    if (isFetching) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"Carregando...\");\n    }\n\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(TableHeaders, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })), swPlanetss.map(elements => {\n      React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, elements.name));\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, swPlanetss.map(elements => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, elements.name))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"StarWars Datatable with Filters\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  swPlanetss: state.swPlanetss.data,\n  isFetching: state.swPlanetss.isFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCurrentPlanets: () => dispatch(fetchPlanets())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","fetchPlanets","TableHeaders","Table","Component","componentDidMount","getCurrentPlanets","props","render","swPlanetss","isFetching","map","elements","name","mapStateToProps","state","data","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;AAEA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAmC;AACjCC,EAAAA,iBAAiB,GAAE;AAAA,UACTC,iBADS,GACa,KAAKC,KADlB,CACTD,iBADS,EAEjB;;AACAA,IAAAA,iBAAiB;AAClB;;AAEDE,EAAAA,MAAM,GAAG;AAAA,wBAC4B,KAAKD,KADjC;AAAA,UACCE,UADD,eACCA,UADD;AAAA,UACaC,UADb,eACaA,UADb,EAGP;AACA;;AACA,QAAIA,UAAJ,EAAe;AACb,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF;AAGD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIGD,UAAU,CAACE,GAAX,CAAgBC,QAAD,IAAa;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,QAAQ,CAACC,IAAd,CADF;AAaD,KAdA,CAJH,CADF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEJ,UAAU,CAACE,GAAX,CAAgBC,QAAD,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,QAAQ,CAACC,IAAf,CADD,CADF,CArBF,EA0BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCA1BE,CADF;AA8BD;;AA/CgC;;AAkDnC,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCN,EAAAA,UAAU,EAAEM,KAAK,CAACN,UAAN,CAAiBO,IADK;AAElCN,EAAAA,UAAU,EAAEK,KAAK,CAACN,UAAN,CAAiBC;AAFK,CAAZ,CAAxB;;AAIA,MAAMO,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,iBAAiB,EAAE,MAAMY,QAAQ,CAChCjB,YAAY,EADoB;AADO,CAAf,CAA3B;;AAMA,eAAeD,OAAO,CAACc,eAAD,EAAiBG,kBAAjB,CAAP,CAA4Cd,KAA5C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPlanets } from '../actions';\nimport TableHeaders from './tableheaders';\n\n// import PropTypes from 'prop-types';\n\nclass Table extends React.Component{\n  componentDidMount(){\n    const { getCurrentPlanets } = this.props;\n    // console.log('antes de chamar')\n    getCurrentPlanets();\n  }\n\n  render (){\n    const { swPlanetss, isFetching } = this.props\n   \n    // console.log(swPlanetss);\n    // console.log(typeof(swPlanetss))\n    if (isFetching){\n      return(\n        <p>Carregando...</p>\n      )\n    }\n    return(\n      <section>\n        <table>\n          <thead>\n            <TableHeaders />\n          </thead>\n          {swPlanetss.map((elements) =>{\n            <tbody>\n              <td>{elements.name}</td>\n              {/* <td>{elements.rotation_period}</td>\n              <td>{elements.orbital_period}</td>\n              <td>{elements.diameter}</td>\n              <td>{elements.climate}</td>\n              <td>{elements.gravity}</td>\n              <td>{elements.terrain}</td>\n              <td>{elements.surface_water}</td>\n              <td>{elements.population}</td>\n              <td>{elements.films}</td>\n              <td>{elements.created}</td> */}\n            </tbody>\n          })}\n        </table>\n        <div> \n         {swPlanetss.map((elements)=> (\n           <div>{elements.name}</div>\n         ))}\n        </div>\n    <div>StarWars Datatable with Filters</div>\n    </section>\n    )\n  }\n}\n  \nconst mapStateToProps = (state) => ({\n  swPlanetss: state.swPlanetss.data,\n  isFetching: state.swPlanetss.isFetching,\n})\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrentPlanets: () => dispatch\n  (fetchPlanets()),\n})\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Table);\n"]},"metadata":{},"sourceType":"module"}