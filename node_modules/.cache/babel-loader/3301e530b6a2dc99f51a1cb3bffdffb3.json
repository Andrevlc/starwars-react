{"ast":null,"code":"var _jsxFileName = \"/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPlanets } from '../actions'; // import PropTypes from 'prop-types';\n\nclass Table extends React.Component {\n  componentDidMount() {\n    const getCurrentPlanets = this.props.getCurrentPlanets;\n    console.log('antes de chamar');\n    getCurrentPlanets(); // console.log(oi);\n  }\n\n  render() {\n    const _this$props = this.props,\n          swPlanetss = _this$props.swPlanetss,\n          isFetching = _this$props.isFetching,\n          data = _this$props.data;\n    console.log(swPlanetss);\n    console.log(typeof swPlanetss);\n\n    if (isFetching) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"LOADING\");\n    }\n\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"StarWars Datatable with Filters\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  swPlanetss: state.swPlanetss.data.results,\n  isFetching: state.swPlanetss.isFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCurrentPlanets: () => dispatch(fetchPlanets())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","connect","fetchPlanets","Table","Component","componentDidMount","getCurrentPlanets","props","console","log","render","swPlanetss","isFetching","data","mapStateToProps","state","results","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,YAA7B,C,CACA;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAmC;AACjCC,EAAAA,iBAAiB,GAAE;AAAA,UACTC,iBADS,GACa,KAAKC,KADlB,CACTD,iBADS;AAEjBE,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAH,IAAAA,iBAAiB,GAHA,CAIjB;AACD;;AAEDI,EAAAA,MAAM,GAAG;AAAA,wBACkC,KAAKH,KADvC;AAAA,UACCI,UADD,eACCA,UADD;AAAA,UACaC,UADb,eACaA,UADb;AAAA,UACyBC,IADzB,eACyBA,IADzB;AAGPL,IAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOE,UAAnB;;AACA,QAAIC,UAAJ,EAAe;AACb,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF;AAGD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCANE,CADF;AAUD;;AA5BgC;;AA+BnC,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCJ,EAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,CAAiBE,IAAjB,CAAsBG,OADA;AAElCJ,EAAAA,UAAU,EAAEG,KAAK,CAACJ,UAAN,CAAiBC;AAFK,CAAZ,CAAxB;;AAIA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,iBAAiB,EAAE,MAAMY,QAAQ,CAChChB,YAAY,EADoB;AADO,CAAf,CAA3B;;AAMA,eAAeD,OAAO,CAACa,eAAD,EAAiBG,kBAAjB,CAAP,CAA4Cd,KAA5C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPlanets } from '../actions';\n// import PropTypes from 'prop-types';\n\nclass Table extends React.Component{\n  componentDidMount(){\n    const { getCurrentPlanets } = this.props;\n    console.log('antes de chamar')\n    getCurrentPlanets();\n    // console.log(oi);\n  }\n\n  render (){\n    const { swPlanetss, isFetching, data } = this.props\n   \n    console.log(swPlanetss);\n    console.log(typeof(swPlanetss))\n    if (isFetching){\n      return(\n        <p>LOADING</p>\n      )\n    }\n    return(\n      <section>\n        <div> \n         {/* {swPlanetss.map((elements)=> (\n           <div>{elements.name}</div>\n         ))} */}\n        </div>\n    <div>StarWars Datatable with Filters</div>\n    </section>\n    )\n  }\n}\n  \nconst mapStateToProps = (state) => ({\n  swPlanetss: state.swPlanetss.data.results,\n  isFetching: state.swPlanetss.isFetching,\n})\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrentPlanets: () => dispatch\n  (fetchPlanets()),\n})\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Table);\n"]},"metadata":{},"sourceType":"module"}