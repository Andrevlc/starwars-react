{"ast":null,"code":"var _jsxFileName = \"/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/components/selectInputs.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { totalFilter } from '../actions/';\nconst cOptions = ['coluna', 'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n\nclass SelectsInputs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      col: '',\n      com: '',\n      val: 0\n    };\n    this.handleCh = this.handleCh.bind(this);\n  }\n\n  handleCh(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          co = _this$state.co,\n          cm = _this$state.cm,\n          va = _this$state.va;\n    const filter = this.props.filter;\n    const fCheck = cOptions;\n\n    if (filter.length > 0) {\n      filter.forEach(elements => {\n        if (fCheck.includes(elements.column)) {\n          fCheck.splice(fCheck.indexOf(elements.column), 1);\n        }\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"selectColumn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Filtros\"), React.createElement(\"select\", {\n      \"data-testid\": \"column-filter\",\n      name: \"co\",\n      id: \"selectColumn\",\n      onChange: this.handleCh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, fCheck.map(elements => React.createElement(\"option\", {\n      value: elements,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, elements))), React.createElement(\"label\", {\n      htmlFor: \"sel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"select\", {\n      \"data-testid\": \"comparison-filter\",\n      name: \"cm\",\n      id: \"sel\",\n      onChange: this.handleCh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Compara\\xE7\\xE3o\"), React.createElement(\"option\", {\n      value: \"maior que\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"maior que\"), React.createElement(\"option\", {\n      value: \"menor que\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"menor que\"), React.createElement(\"option\", {\n      value: \"igual a\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"igual a\")), React.createElement(\"input\", {\n      type: \"number\",\n      name: \"va\",\n      \"data-testid\": \"value-filter\",\n      onChange: this.handleCh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"button-filter\",\n      onClick: () => this.props.gF(co, cm, va),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Filtrar\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  filter: state.filters.filterByNumericValues\n});\n\nconst mapDispatchToProps = dispatch => ({\n  gF: (a, b, c) => dispatch(totalFilter(a, b, c))\n});\n\nSelectsInputs.propTypes = {\n  filter: PropTypes.func,\n  gF: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectsInputs);","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/components/selectInputs.jsx"],"names":["React","PropTypes","connect","totalFilter","cOptions","SelectsInputs","Component","constructor","props","state","col","com","val","handleCh","bind","event","target","name","value","setState","render","co","cm","va","filter","fCheck","length","forEach","elements","includes","column","splice","indexOf","map","gF","mapStateToProps","filters","filterByNumericValues","mapDispatchToProps","dispatch","a","b","c","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { totalFilter } from '../actions/';\n\nconst cOptions = [\n  'coluna',\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water',\n];\n\nclass SelectsInputs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      col: '',\n      com: '',\n      val: 0,\n    };\n    this.handleCh = this.handleCh.bind(this);\n  }\n  handleCh(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n  render() {\n    const { co, cm, va } = this.state;\n    const { filter } = this.props;\n    const fCheck = cOptions;\n    if (filter.length > 0) {\n      filter.forEach((elements) => {\n        if (fCheck.includes(elements.column)) {\n          fCheck.splice(fCheck.indexOf(elements.column), 1);\n        }\n      });\n    }\n    return (\n      <div>\n        <label htmlFor=\"selectColumn\">Filtros</label>\n        <select data-testid=\"column-filter\" name=\"co\" id=\"selectColumn\" onChange={this.handleCh}>\n          {fCheck.map((elements) => (<option value={elements}>{elements}</option>))}\n        </select>\n        <label htmlFor=\"sel\" />\n        <select data-testid=\"comparison-filter\" name=\"cm\" id=\"sel\" onChange={this.handleCh}>\n          <option>Comparação</option>\n          <option value=\"maior que\">maior que</option>\n          <option value=\"menor que\">menor que</option>\n          <option value=\"igual a\">igual a</option>\n        </select>\n        <input type=\"number\" name=\"va\" data-testid=\"value-filter\" onChange={this.handleCh} />\n        <button type=\"button\" data-testid=\"button-filter\" onClick={() => this.props.gF(co, cm, va)}>\n          Filtrar\n        </button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  filter: state.filters.filterByNumericValues,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  gF: (a, b, c) => dispatch(totalFilter(a, b, c)),\n});\nSelectsInputs.propTypes = {\n  filter: PropTypes.func,\n  gF: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectsInputs);\n"]},"metadata":{},"sourceType":"module"}