{"ast":null,"code":"// export const SW_PLANETS = 'SW_PLANETS';\n// export const startingPlanets = () =>(\n//   {\n//     type: SW_PLANETS,\n//     name: 'Teste',\n//     rotationP: 0,\n//     diameter:0,\n//     climate: 'cold',\n//     gravite: 0,\n//     surfaceWater: 0,\n//     population: 30,\n//   }\n// )\nimport getPlanets from '../services/data';\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS\n});\n\nconst requestPlanetsSuccess = ({\n  results: {\n    name,\n    rotation_period,\n    diameter,\n    climate,\n    gravity,\n    surface_water,\n    population\n  }\n}) => ({\n  type: REQUEST_PLANETS_SUCCESS,\n  name: name,\n  rotation_period: rotation_period,\n  diameter: diameter,\n  climate: climate,\n  gravity: gravity,\n  surface_water: surface_water,\n  population: population\n});\n\nconst requestPlanetsFailure = error => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error\n});\n\nexport function fetchPlanets() {\n  return dispatch => {\n    dispatch(requestPlanets());\n    return getPlanets().then(results => dispatch(requestPlanetsSuccess(results)), error => dispatch(requestPlanetsFailure(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/actions/index.js"],"names":["getPlanets","REQUEST_PLANETS","REQUEST_PLANETS_SUCCESS","REQUEST_PLANETS_FAILURE","requestPlanets","type","requestPlanetsSuccess","results","name","rotation_period","diameter","climate","gravity","surface_water","population","requestPlanetsFailure","error","fetchPlanets","dispatch","then","message"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,kBAAvB;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,uBAAuB,GAAG,wBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;;AAEP,MAAMC,cAAc,GAAG,OAAO;AAC5BC,EAAAA,IAAI,EAAEJ;AADsB,CAAP,CAAvB;;AAIA,MAAMK,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,OAAO,EAAC;AAAEC,IAAAA,IAAF;AACzCC,IAAAA,eADyC;AACzBC,IAAAA,QADyB;AAChBC,IAAAA,OADgB;AACRC,IAAAA,OADQ;AACAC,IAAAA,aADA;AACcC,IAAAA;AADd;AAAV,CAAD,MAC4C;AACxET,EAAAA,IAAI,EAAEH,uBADkE;AAEpEM,EAAAA,IAAI,EAAEA,IAF8D;AAGpEC,EAAAA,eAAe,EAAEA,eAHmD;AAIpEC,EAAAA,QAAQ,EAACA,QAJ2D;AAKpEC,EAAAA,OAAO,EAAEA,OAL2D;AAMpEC,EAAAA,OAAO,EAAEA,OAN2D;AAOpEC,EAAAA,aAAa,EAAEA,aAPqD;AAQpEC,EAAAA,UAAU,EAAEA;AARwD,CAD5C,CAA9B;;AAWA,MAAMC,qBAAqB,GAAIC,KAAD,KAAY;AACxCX,EAAAA,IAAI,EAAEF,uBADkC;AAExCa,EAAAA;AAFwC,CAAZ,CAA9B;;AAKA,OAAO,SAASC,YAAT,GAAuB;AAC5B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACd,cAAc,EAAf,CAAR;AAEA,WAAOJ,UAAU,GACdmB,IADI,CAEFZ,OAAD,IAAaW,QAAQ,CAACZ,qBAAqB,CAACC,OAAD,CAAtB,CAFlB,EAGFS,KAAD,IAAWE,QAAQ,CAACH,qBAAqB,CAACC,KAAK,CAACI,OAAP,CAAtB,CAHhB,CAAP;AAMD,GATD;AAUD","sourcesContent":["// export const SW_PLANETS = 'SW_PLANETS';\n\n// export const startingPlanets = () =>(\n//   {\n//     type: SW_PLANETS,\n//     name: 'Teste',\n//     rotationP: 0,\n//     diameter:0,\n//     climate: 'cold',\n//     gravite: 0,\n//     surfaceWater: 0,\n//     population: 30,\n//   }\n// )\nimport getPlanets from '../services/data';\n\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS,\n\n})\nconst requestPlanetsSuccess = ({ results:{ name,\nrotation_period,diameter,climate,gravity,surface_water,population }}) => ({\n  type: REQUEST_PLANETS_SUCCESS,\n      name: name,\n      rotation_period: rotation_period,\n      diameter:diameter,\n      climate: climate,\n      gravity: gravity,\n      surface_water: surface_water,\n      population: population,\n})\nconst requestPlanetsFailure = (error) => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error,\n})\n\nexport function fetchPlanets(){\n  return (dispatch) => {\n    dispatch(requestPlanets());\n\n    return getPlanets()\n      .then(\n        (results) => dispatch(requestPlanetsSuccess(results)),\n        (error) => dispatch(requestPlanetsFailure(error.message)),\n      )\n\n  }\n}"]},"metadata":{},"sourceType":"module"}