{"ast":null,"code":"// export const SW_PLANETS = 'SW_PLANETS';\n// export const startingPlanets = () =>(\n//   {\n//     type: SW_PLANETS,\n//     name: 'Teste',\n//     rotationP: 0,\n//     diameter:0,\n//     climate: 'cold',\n//     gravite: 0,\n//     surfaceWater: 0,\n//     population: 30,\n//   }\n// )\nimport getPlanets from '../services/data';\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\nexport const SEARCH_FILTER = 'SEARCH_FILTER';\nexport const NUMBER_FILTER = 'NUMBER_FILTER';\nexport const COLUMN_FILTER = 'COLUMN_FILTER';\nexport const OPERATION_FILTER = 'OPERATION_FILTER';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS\n});\n\nconst requestPlanetsSuccess = results => ({\n  type: REQUEST_PLANETS_SUCCESS,\n  data: results\n});\n\nconst requestPlanetsFailure = error => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error\n});\n\nexport function searchFilter(string) {\n  return {\n    type: SEARCH_FILTER,\n    payload: string\n  };\n}\nexport function nFilter(number) {\n  return {\n    type: NUMBER_FILTER,\n    payload: number\n  };\n}\nexport function oFilters(operation) {\n  return {\n    type: OPERATION_FILTER,\n    payload: operation\n  };\n}\nexport function cFilters(column) {\n  return {\n    type: COLUMN_FILTER,\n    payload: column\n  };\n}\nexport function fetchPlanets() {\n  return dispatch => {\n    dispatch(requestPlanets());\n    return getPlanets().then(results => dispatch(requestPlanetsSuccess(results)), error => dispatch(requestPlanetsFailure(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/actions/index.js"],"names":["getPlanets","REQUEST_PLANETS","REQUEST_PLANETS_SUCCESS","REQUEST_PLANETS_FAILURE","SEARCH_FILTER","NUMBER_FILTER","COLUMN_FILTER","OPERATION_FILTER","requestPlanets","type","requestPlanetsSuccess","results","data","requestPlanetsFailure","error","searchFilter","string","payload","nFilter","number","oFilters","operation","cFilters","column","fetchPlanets","dispatch","then","message"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,kBAAvB;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,uBAAuB,GAAG,wBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;;AAEP,MAAMC,cAAc,GAAG,OAAO;AAC5BC,EAAAA,IAAI,EAAER;AADsB,CAAP,CAAvB;;AAIA,MAAMS,qBAAqB,GAAIC,OAAD,KAAc;AAC1CF,EAAAA,IAAI,EAAEP,uBADoC;AAE1CU,EAAAA,IAAI,EAAED;AAFoC,CAAd,CAA9B;;AAKA,MAAME,qBAAqB,GAAIC,KAAD,KAAY;AACxCL,EAAAA,IAAI,EAAEN,uBADkC;AAExCW,EAAAA;AAFwC,CAAZ,CAA9B;;AAKA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AACnC,SACA;AACEP,IAAAA,IAAI,EAAEL,aADR;AAEEa,IAAAA,OAAO,EAAED;AAFX,GADA;AAKD;AAED,OAAO,SAASE,OAAT,CAAiBC,MAAjB,EAAwB;AAC7B,SACE;AACEV,IAAAA,IAAI,EAAEJ,aADR;AAEEY,IAAAA,OAAO,EAACE;AAFV,GADF;AAMD;AACD,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACjC,SACE;AACEZ,IAAAA,IAAI,EAAEF,gBADR;AAEEU,IAAAA,OAAO,EAACI;AAFV,GADF;AAMD;AACD,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAAyB;AAC9B,SACE;AACEd,IAAAA,IAAI,EAAEH,aADR;AAEEW,IAAAA,OAAO,EAACM;AAFV,GADF;AAMD;AACD,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACjB,cAAc,EAAf,CAAR;AAEA,WAAOR,UAAU,GACd0B,IADI,CAEFf,OAAD,IAAac,QAAQ,CAACf,qBAAqB,CAACC,OAAD,CAAtB,CAFlB,EAGFG,KAAD,IAAWW,QAAQ,CAACZ,qBAAqB,CAACC,KAAK,CAACa,OAAP,CAAtB,CAHhB,CAAP;AAKD,GARD;AASD","sourcesContent":["// export const SW_PLANETS = 'SW_PLANETS';\n\n// export const startingPlanets = () =>(\n//   {\n//     type: SW_PLANETS,\n//     name: 'Teste',\n//     rotationP: 0,\n//     diameter:0,\n//     climate: 'cold',\n//     gravite: 0,\n//     surfaceWater: 0,\n//     population: 30,\n//   }\n// )\nimport getPlanets from '../services/data';\n\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\nexport const SEARCH_FILTER = 'SEARCH_FILTER';\nexport const NUMBER_FILTER = 'NUMBER_FILTER';\nexport const COLUMN_FILTER = 'COLUMN_FILTER';\nexport const OPERATION_FILTER = 'OPERATION_FILTER';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS,\n});\n\nconst requestPlanetsSuccess = (results) => ({\n  type: REQUEST_PLANETS_SUCCESS,\n  data: results,\n});\n\nconst requestPlanetsFailure = (error) => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error,\n});\n\nexport function searchFilter(string) {\n  return (\n  {\n    type: SEARCH_FILTER,\n    payload: string,\n  });\n}\n\nexport function nFilter(number){\n  return (\n    {\n      type: NUMBER_FILTER,\n      payload:number,\n    }\n  )\n}\nexport function oFilters(operation){\n  return (\n    {\n      type: OPERATION_FILTER,\n      payload:operation,\n    }\n  )\n}\nexport function cFilters(column){\n  return (\n    {\n      type: COLUMN_FILTER,\n      payload:column,\n    }\n  )\n}\nexport function fetchPlanets() {\n  return (dispatch) => {\n    dispatch(requestPlanets());\n\n    return getPlanets()\n      .then(\n        (results) => dispatch(requestPlanetsSuccess(results)),\n        (error) => dispatch(requestPlanetsFailure(error.message)),\n      );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}