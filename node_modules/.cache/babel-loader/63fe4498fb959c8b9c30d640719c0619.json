{"ast":null,"code":"// export const SW_PLANETS = 'SW_PLANETS';\n// export const startingPlanets = () =>(\n//   {\n//     type: SW_PLANETS,\n//     name: 'Teste',\n//     rotationP: 0,\n//     diameter:0,\n//     climate: 'cold',\n//     gravite: 0,\n//     surfaceWater: 0,\n//     population: 30,\n//   }\n// )\nimport { getPlanets } from '../services/data';\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS\n});\n\nconst requestPlanetsSuccess = ({\n  data: {\n    data,\n    name,\n    rotation_period,\n    diameter,\n    climate,\n    gravity,\n    surface_water,\n    population\n  }\n}) => ({\n  type: REQUEST_PLANETS_SUCCESS,\n  // name: name,\n  // rotation_period: rotation_period,\n  // diameter:diameter,\n  // climate: climate,\n  // gravity: gravity,\n  // surface_water: surface_water,\n  // population: population,\n  data: data\n});\n\nconst requestPlanetsFailure = error => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error\n});\n\nexport function fetchPlanets() {\n  return dispatch => {\n    dispatch(requestPlanets());\n    return getPlanets().then(planets => dispatch(requestPlanetsSuccess(planets)), error => dispatch(requestPlanetsFailure(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/andre/Trybe/Projeto/sd-05-block16-project-react-redux-starwars-database-filters/src/actions/index.js"],"names":["getPlanets","REQUEST_PLANETS","REQUEST_PLANETS_SUCCESS","REQUEST_PLANETS_FAILURE","requestPlanets","type","requestPlanetsSuccess","data","name","rotation_period","diameter","climate","gravity","surface_water","population","requestPlanetsFailure","error","fetchPlanets","dispatch","then","planets","message"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,uBAAuB,GAAG,wBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;;AAEP,MAAMC,cAAc,GAAG,OAAO;AAC5BC,EAAAA,IAAI,EAAEJ;AADsB,CAAP,CAAvB;;AAIA,MAAMK,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAC;AAAEA,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AACtCC,IAAAA,eADsC;AACtBC,IAAAA,QADsB;AACbC,IAAAA,OADa;AACLC,IAAAA,OADK;AACGC,IAAAA,aADH;AACiBC,IAAAA;AADjB;AAAP,CAAD,MAC4C;AACxET,EAAAA,IAAI,EAAEH,uBADkE;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACEK,EAAAA,IAAI,EAAEA;AAT4D,CAD5C,CAA9B;;AAYA,MAAMQ,qBAAqB,GAAIC,KAAD,KAAY;AACxCX,EAAAA,IAAI,EAAEF,uBADkC;AAExCa,EAAAA;AAFwC,CAAZ,CAA9B;;AAKA,OAAO,SAASC,YAAT,GAAuB;AAC5B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACd,cAAc,EAAf,CAAR;AAEA,WAAOJ,UAAU,GACdmB,IADI,CAEFC,OAAD,IAAaF,QAAQ,CAACZ,qBAAqB,CAACc,OAAD,CAAtB,CAFlB,EAGFJ,KAAD,IAAWE,QAAQ,CAACH,qBAAqB,CAACC,KAAK,CAACK,OAAP,CAAtB,CAHhB,CAAP;AAMD,GATD;AAUD","sourcesContent":["// export const SW_PLANETS = 'SW_PLANETS';\n\n// export const startingPlanets = () =>(\n//   {\n//     type: SW_PLANETS,\n//     name: 'Teste',\n//     rotationP: 0,\n//     diameter:0,\n//     climate: 'cold',\n//     gravite: 0,\n//     surfaceWater: 0,\n//     population: 30,\n//   }\n// )\nimport { getPlanets } from '../services/data';\n\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const REQUEST_PLANETS_SUCCESS = 'REQUEST_PLANETS_SUCESS';\nexport const REQUEST_PLANETS_FAILURE = 'REQUEST_PLANETS_FAILURE';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS,\n\n})\nconst requestPlanetsSuccess = ({ data:{ data, name,\nrotation_period,diameter,climate,gravity,surface_water,population }}) => ({\n  type: REQUEST_PLANETS_SUCCESS,\n      // name: name,\n      // rotation_period: rotation_period,\n      // diameter:diameter,\n      // climate: climate,\n      // gravity: gravity,\n      // surface_water: surface_water,\n      // population: population,\n        data: data,\n})\nconst requestPlanetsFailure = (error) => ({\n  type: REQUEST_PLANETS_FAILURE,\n  error,\n})\n\nexport function fetchPlanets(){\n  return (dispatch) => {\n    dispatch(requestPlanets());\n\n    return getPlanets()\n      .then(\n        (planets) => dispatch(requestPlanetsSuccess(planets)),\n        (error) => dispatch(requestPlanetsFailure(error.message)),\n      )\n\n  }\n}"]},"metadata":{},"sourceType":"module"}